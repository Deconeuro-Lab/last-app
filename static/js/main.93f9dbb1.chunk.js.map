{"version":3,"sources":["img sync /^/version.*$","img/versionA/naming/test-blur.jpg","img/versionA/naming/test-croc.jpg","img/versionA/naming/test-fork.jpg","img/versionA/naming/test-pen.jpg","img/versionA/naming/test-phone.jpg","img/versionA/naming/test-pineapple.jpg","img/versionA/naming/test.jpg","img/versionB/naming/test-blur.jpg","img/versionB/naming/test-butterfly.jpg","img/versionB/naming/test-giraffe.jpg","img/versionB/naming/test-knife.jpg","img/versionB/naming/test-pencil.jpg","img/versionB/naming/test-tv.jpg","img/versionB/naming/test.jpg","img sync /^/version.*/test/.png$","views/AuthMenu/AuthMenu.tsx","components/YesNoConfirmModal/YesNoConfirmModal.tsx","views/UserRegistration/UserRegistration.tsx","components/InfoAlertModal/InfoAlertModal.tsx","components/LoadingDots/LoadingDots.tsx","websocket.ts","views/ExaminerMenu/ExaminerMenu.tsx","views/PatientMenu/PatientMenu.tsx","views/ExaminerTests/ExaminerTests.tsx","components/ViewPanel/ViewPanel.tsx","components/Prompt/Prompt.tsx","components/ControlPanel/ControlPanel.tsx","util/csv.js","components/TestResultsModal/TestResultsModal.tsx","components/TestSummaryBar/TestSummaryBar.tsx","components/BackButton/BackButton.tsx","data/LASTests.ts","views/TestDashboard/TestDashboard.tsx","components/App/App.tsx","index.tsx","img/versionA/picID/test.png","img/versionB/picID/test.png"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","AuthMenu","useState","password","setPassword","isLoading","setIsLoading","hadEnteredWrongPass","setHadEnteredWrongPass","useEffect","Cookies","get","to","label","className","style","color","visibility","onSubmit","preventDefault","setTimeout","set","Math","floor","random","type","onChange","event","target","value","YesNoConfirmModal","text1","text2","show","hideModal","action","label1","label2","Modal","onHide","size","centered","Body","Button","float","variant","onClick","UserRegistration","props","toUserMenus","setToUserMenus","toAuth","setToAuth","showModal","setShowModal","userType","setUserType","userFirstName","setUserFirstName","userLastName","setUserLastName","hadSubmittedEmptyForm","setHadSubmittedEmptyForm","prevUserFirstName","prevUserLastName","prevUserType","loggedIn","location","state","wantsToReenterUserInfo","dangerLabel","userTypeLabel","trim","autoComplete","placeholder","remove","InfoAlertModal","onExit","LoadingDots","fontSize","ws","io","connect","ExaminerMenu","sessionID","setSessionID","patientSessionIDToConnectTo","setPatientSessionIDToConnectTo","firstName","lastName","patient","setPatient","showPatientFoundModal","setShowPatientFoundModal","showPatientNotFoundModal","setShowPatientNotFoundModal","showInvalidSessionIDModal","setShowInvalidSessionIDModal","connected","socketSetup","on","socketCleanup","off","console","log","generateSessionID","emit","socketID","toLowerCase","substring","length","examiner","textAlign","maxLength","pathname","PatientMenu","setExaminer","ExaminerTests","ViewPanel","viewElement","subtest","testCategory","testVersion","src","require","jpg","alt","item","draggable","Prompt","prompt1","prompt2","isTimerRequired","currentSubtestMSElapsed","setCurrentSubtestMSElapsed","setCurrentSubtestHasStarted","isPaused","setIsPaused","msElapsed","setMsElapsed","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","updatedMsElapsed","resetTimer","component","currentS","currentMs","timeElapsedLabel","ControlPanel","currentSubtestHasStarted","entireTestIsDone","goToNextSubtest","recordSubtestResult","popover","Popover","Title","as","Content","acceptableResponses","join","incorrectResponses","OverlayTrigger","placement","overlay","cursor","fontWeight","onPassFailBtnClick","passed","disabled","exportReport","testResults","testCategories","data","results","mapFullCategoryName","naming","repetition","autoseq","picID","verbal","arr","cat","result","newObj","test","push","flattenTestResultsToArray","csv","csvRows","headers","row","values","header","escaped","replace","arrayOfObjectsTOCSV","fileName","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","removeChild","download","TestResultsModal","handleClose","previousTestCategoryIndex","tests","showNaming","setShowNaming","showRepetition","setShowRepetition","showAutoSeq","setShowAutoSeq","showpicID","setShowpicID","showVerbal","setShowVerbal","testCategoryToShow","mapCategoryCollapse","category","i","fullCategoryName","setShow","ith","key","Collapse","in","resultOfSubtest","find","iconResult","secondsElapsed","subtestName","generateListOfSubtests","keyboard","Header","Footer","TestSummaryBar","numberOfTests","ithTest","openModal","hasBeenClicked","setHasBeenClicked","BackButton","LASTests","A","B","categoriesInOrder","TestDashboard","setResults","setEntireTestIsDone","currentSubtestIndex","setCurrentSubtestIndex","currentTestCategoryIndex","setCurrentTestCategoryIndex","showTestResultsModal","setShowTestResultsModal","showGoBackModal","setShowGoBackModal","pathElements","split","currentTestCategory","currentSubtest","setNextTestIndices","newResult","newResults","history","goBack","App","basename","Auth","exact","path","ReactDOM","render","getElementById"],"mappings":"yIAAA,IAAIA,EAAM,CACT,kCAAmC,IACnC,kCAAmC,IACnC,kCAAmC,IACnC,iCAAkC,IAClC,mCAAoC,IACpC,uCAAwC,IACxC,6BAA8B,IAC9B,4BAA6B,GAC7B,kCAAmC,IACnC,uCAAwC,IACxC,qCAAsC,IACtC,mCAAoC,IACpC,oCAAqC,IACrC,gCAAiC,IACjC,6BAA8B,IAC9B,4BAA6B,IAI9B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,oBCrCpBU,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3C,IAAId,EAAM,CACT,4BAA6B,GAC7B,4BAA6B,IAI9B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,2SC2DLY,G,MA1EY,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACvBC,EADuB,KACbC,EADa,OAEKF,oBAAS,GAFd,mBAEvBG,EAFuB,KAEZC,EAFY,OAGyBJ,oBAAS,GAHlC,mBAGvBK,EAHuB,KAGFC,EAHE,KAK/BC,qBAAU,cAEP,IAMH,GAFiBC,IAAQC,IAAI,YAEf,OAAO,kBAAC,IAAD,CAAUC,GAAG,uBAElC,IAuBIC,EAuBJ,OArBEA,EADEN,IAAwBF,EAExB,uBAAGS,UAAU,eAAeC,MAAO,CAAEC,MAAO,QAA5C,cAIOX,EAEP,uBAAGS,UAAU,gBACX,kBAAC,MAAD,eACA,kBAAC,MAAD,eACA,kBAAC,MAAD,gBAKF,uBAAGA,UAAU,eAAeC,MAAO,CAAEE,WAAY,WAAjD,KAOF,yBAAKH,UAAU,YACb,0BAAMI,SAhDO,SAACzB,GAChBA,EAAE0B,iBAEe,KAAbhB,IACJG,GAAa,GAGbc,YAAW,WAZE,gBAaPjB,EAEFO,IAAQW,IAAI,YAAY,IAExBjB,EAAY,IACZI,GAAuB,IAEzBF,GAAa,KACZgB,KAAKC,MAAsB,IAAhBD,KAAKE,cAiCf,yBAAKV,UAAU,cACb,6CACA,2BAAOW,KAAK,WAAWX,UAAU,eAAeY,SAhC/B,SAACC,GACxBvB,EAAYuB,EAAMC,OAAOC,QA+ByDA,MAAO1B,IAClFU,O,kBC3CIiB,EApB4B,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACvEC,EAASL,EAAQ,uBAAGjB,UAAU,OAAOiB,GAAa,KAClDM,EAASL,EAAQ,uBAAGlB,UAAU,OAAOkB,GAAa,KAEtD,OACE,kBAACM,EAAA,EAAD,CAAOL,KAAMA,EAAMM,OAAQL,EAAWM,KAAK,KAAKC,UAAQ,GACtD,kBAACH,EAAA,EAAMI,KAAP,KACGN,EACAC,EACD,kBAACM,EAAA,EAAD,CAAQ5B,MAAO,CAAE6B,MAAO,SAAWC,QAAQ,oBAAoBC,QAASX,GAAxE,OAGA,kBAACQ,EAAA,EAAD,CAAQ5B,MAAO,CAAE6B,MAAO,SAAWC,QAAQ,oBAAoBC,QAASZ,GAAxE,SC+HOa,EA7I2B,SAACC,GAAW,IAAD,EACX9C,oBAAS,GADE,mBAC3C+C,EAD2C,KAC9BC,EAD8B,OAErBhD,oBAAS,GAFY,mBAE3CiD,EAF2C,KAEnCC,EAFmC,OAGflD,oBAAS,GAHM,mBAG3CmD,EAH2C,KAGhCC,EAHgC,OAIjBpD,mBAAS,YAJQ,mBAI3CqD,EAJ2C,KAIjCC,EAJiC,OAKPtD,mBAAS,IALF,mBAK3CuD,EAL2C,KAK5BC,EAL4B,OAMTxD,mBAAS,IANA,mBAM3CyD,EAN2C,KAM7BC,EAN6B,OAOS1D,oBAAS,GAPlB,mBAO3C2D,EAP2C,KAOpBC,EAPoB,KASnDrD,qBAAU,WACRiD,EAAiBK,GAAqB,IACtCH,EAAgBI,GAAoB,IACpCR,EAAYS,GAAgB,cAC3B,IAEH,IAAMC,EAAWxD,IAAQC,IAAI,YACvBoD,EAAoBrD,IAAQC,IAAI,iBAChCqD,EAAmBtD,IAAQC,IAAI,gBAC/BsD,EAAevD,IAAQC,IAAI,YAsBjC,IAAKuD,GAAYf,EAAQ,OAAO,kBAAC,IAAD,CAAUvC,GAAG,MAC7C,GAAIqC,KAlBKD,EAAMmB,SAASC,QAASpB,EAAMmB,SAASC,MAAMC,yBAK7CN,GAAqBC,GAAoBC,EAchD,OAAO,kBAAC,IAAD,CAAUrD,GAAE,WAAMqD,KAI3B,IA+BIK,EAJAC,EAAgB,GAmBpB,OAlB6BA,EAAZ,aAAbhB,EAAyC,aACxB,YAInBe,EADET,EAEA,uBAAG9C,MAAO,CAAEC,MAAO,OAASF,UAAU,gBAAtC,6BAMA,uBAAGA,UAAU,eAAeC,MAAO,CAAEE,WAAY,WAAjD,KAOF,yBAAKH,UAAU,oBACb,0CACA,0BAAMI,SAjDO,SAACzB,GAChBA,EAAE0B,iBACEsC,GAAiBE,GAAgBJ,GACnC7C,IAAQW,IAAI,gBAAiBoC,EAAce,QAC3C9D,IAAQW,IAAI,eAAgBsC,EAAaa,QACzC9D,IAAQW,IAAI,WAAYkC,GACxBL,GAAe,GACfY,GAAyB,IAEzBA,GAAyB,KAyCvB,yBAAKhD,UAAU,cACb,+BAAQyD,GACR,4BAAQzD,UAAU,eAAeY,SAvChB,SAACjC,GACxB+D,EAAY/D,EAAEmC,OAAOC,QAsC8CA,MAAO0B,GAClE,4BAAQ1B,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,aAGJ,yBAAKf,UAAU,cACb,gDACA,2BACEW,KAAK,OACLX,UAAU,eACV2D,aAAa,MACbC,YAAY,aACZhD,SA/CoB,SAACjC,GAC7BiE,EAAiBjE,EAAEmC,OAAOC,QA+ClBA,MAAO4B,KAGX,yBAAK3C,UAAU,cACb,2BACEW,KAAK,OACLX,UAAU,eACV2D,aAAa,MACbC,YAAY,YACZhD,SArDmB,SAACjC,GAC5BmE,EAAgBnE,EAAEmC,OAAOC,QAqDjBA,MAAO8B,KAGVW,EACD,4BAAQxD,UAAU,oCAAlB,aAEF,uBAAGA,UAAU,qBAAqBgC,QAAS,kBAAMQ,GAAa,KAA9D,qDAIA,kBAAC,EAAD,CACErB,KAAMoB,EACNnB,UAAW,kBAAMoB,GAAa,IAC9BvB,MAAM,qCACNI,OAxGU,WACdzB,IAAQiE,OAAO,YACfjE,IAAQiE,OAAO,iBACfjE,IAAQiE,OAAO,gBACfjE,IAAQiE,OAAO,YACfjE,IAAQiE,OAAO,WACfvB,GAAU,QCrBCwB,EAdyB,SAAC,GAAiD,IAA/CxC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQJ,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,UAAW2C,EAAa,EAAbA,OAC1E,OACE,kBAACvC,EAAA,EAAD,CAAOL,KAAMA,EAAMM,OAAQL,EAAW2C,OAAQA,EAAQrC,KAAK,KAAKC,UAAQ,GACtE,kBAACH,EAAA,EAAMI,KAAP,KACGN,EACAC,EACD,kBAACM,EAAA,EAAD,CAAQ5B,MAAO,CAAE6B,MAAO,SAAWC,QAAQ,oBAAoBC,QAASZ,GAAxE,SCLO4C,EAVK,WAClB,OACE,0BAAM/D,MAAO,CAAEgE,SAAU,QACvB,kBAAC,MAAD,UACA,kBAAC,MAAD,UACA,kBAAC,MAAD,Y,gBCLSC,E,OADJC,EAAGC,QAAQ,0CC0KPC,EAhKgB,WAAM,MAECjF,mBAAS,IAFV,mBAE3BkF,EAF2B,KAEhBC,EAFgB,OAGqCnF,mBAAS,IAH9C,mBAG3BoF,EAH2B,KAGEC,EAHF,OAIHrF,mBAAkB,CAAEsF,UAAW,GAAIC,SAAU,GAAIL,UAAW,KAJzD,mBAI3BM,EAJ2B,KAIlBC,EAJkB,OAMyBzF,oBAAS,GANlC,mBAM3B0F,EAN2B,KAMJC,EANI,OAO+B3F,oBAAS,GAPxC,mBAO3B4F,EAP2B,KAODC,EAPC,OAQiC7F,oBAAS,GAR1C,mBAQ3B8F,EAR2B,KAQAC,EARA,KAUnCxF,qBAAU,WAOR,OANIuE,EAAGkB,WAAWC,IAElBnB,EAAGoB,GAAG,UAAWD,GACjBnB,EAAGoB,GAAG,YAAaD,GACnBnB,EAAGoB,GAAG,aAAcC,GAEb,WACLrB,EAAGsB,IAAI,WACPtB,EAAGsB,IAAI,aACPtB,EAAGsB,IAAI,iBAER,IAEH,IAAMH,EAAc,WAClBI,QAAQC,IAAIxB,GACZK,EAAaoB,EAAkBzB,EAAG3F,KAClC2F,EAAG0B,KAAH,uBAAgClB,EAAWC,IAGvCY,EAAgB,WACpBhB,EAAa,KAIToB,EAAoB,SAACE,GACzB,OAAOA,EAASC,cAAcC,UAAU,EAAG,IAqBvC3C,EAAWxD,IAAQC,IAAI,YACvB6E,EAAY9E,IAAQC,IAAI,iBACxB8E,EAAW/E,IAAQC,IAAI,gBACvB4C,EAAW7C,IAAQC,IAAI,YAE7B,OAAKuD,EACY,YAAbX,EAA+B,kBAAC,IAAD,CAAU3C,GAAG,aAC3C4E,GAAcC,GAAalC,EAY9B,yBAAKzC,UAAU,sDACb,0CACA,uBAAGA,UAAU,OAAb,YAA6B0E,EAA7B,KACA,uBAAG1E,UAAU,OAAb,sCACCsE,EACC,6BACE,iDACqB,gCAASA,GAD9B,KAGA,yBAAKtE,UAAU,sBACb,0BAAMI,SA/CqB,SAACzB,GAGpC,GAFAA,EAAE0B,iBAEEmE,EAA4BwB,OAAS,EACvCb,GAA6B,OACxB,CACL,IAAIc,EAAW,CAAEvB,YAAWC,WAAUL,aACtCJ,EAAG0B,KAAK,0BAA2BpB,EAA6ByB,GAAU,SAACrB,GACrEA,GACFC,EAAWD,GACXG,GAAyB,IAEzBE,GAA4B,SAoCxB,yBAAKjF,UAAU,cACb,2BACEW,KAAK,OACLgD,aAAa,MACb3D,UAAU,eACVC,MAAO,CAAEiG,UAAW,UACpBtC,YAAY,2BACZuC,UAAW,EACXpF,MAAOyD,EACP5D,SAAU,SAACjC,GAAD,OAA4C8F,EAA+B9F,EAAEmC,OAAOC,WAGlG,4BAAQf,UAAU,oCAAlB,yBAKN,sDAC0B,kBAAC,EAAD,OAG5B,kBAAC,IAAD,CAAMA,UAAU,oBAAoBF,GAAG,mBAAvC,yDAGA,kBAAC,IAAD,CACEE,UAAU,oBACVF,GAAI,CACFsG,SAAU,qBACV9C,MAAO,CAAEC,wBAAwB,KAJrC,0CAUA,kBAAC,EAAD,CACEpC,KAAM2D,EACN1D,UAAW,kBAAM2D,GAAyB,IAC1CzD,OAAQ,uBAAGtB,UAAU,OAAb,2BACRuB,OACE,uBAAGvB,UAAU,OAAb,oCACoC,IAClC,gCACG4E,EAAQF,UADX,IACuBE,EAAQD,UAHjC,OASJ,kBAAC,EAAD,CACExD,KAAM6D,EACN5D,UAAW,kBAAM6D,GAA4B,IAC7ClB,OAAQ,WACNU,EAA+B,KAEjCnD,OACE,uBAAGtB,UAAU,OAAb,2BAC0B,gCAASwE,GADnC,0CAMJ,kBAAC,EAAD,CACErD,KAAM+D,EACN9D,UAAW,kBAAM+D,GAA6B,IAC9CpB,OAAQ,WACNU,EAA+B,KAEjCnD,OAAQ,uBAAGtB,UAAU,OAAb,6CAxFV,kBAAC,IAAD,CACEF,GAAI,CACFsG,SAAU,qBACV9C,MAAO,CAAEC,wBAAwB,MAPnB,kBAAC,IAAD,CAAUzD,GAAG,OCuCtBuG,EArGK,WAAM,MAEYjH,mBAAS,IAFrB,mBAEhBkF,EAFgB,KAELC,EAFK,OAIUnF,mBAAmB,CAAEsF,UAAW,GAAIC,SAAU,GAAIL,UAAW,KAJvE,mBAIhB2B,EAJgB,KAINK,EAJM,OAKYlH,oBAAS,GALrB,mBAKhBmD,EALgB,KAKLC,EALK,KAOxB7C,qBAAU,WAWR,OAVIuE,EAAGkB,WAAWC,IAElBnB,EAAGoB,GAAG,UAAWD,GACjBnB,EAAGoB,GAAG,YAAaD,GACnBnB,EAAGoB,GAAG,aAAcC,GACpBrB,EAAGoB,GAAG,uBAAuB,SAACW,GAC5BK,EAAYL,GACZzD,GAAa,MAGR,WACL0B,EAAGsB,IAAI,WACPtB,EAAGsB,IAAI,aACPtB,EAAGsB,IAAI,cACPtB,EAAGsB,IAAI,aAER,IAEH,IAAMH,EAAc,WAClBd,EAAaoB,EAAkBzB,EAAG3F,KAClC2F,EAAG0B,KAAH,sBAA+BlB,EAAWC,IAItCY,EAAgB,WACpBhB,EAAa,KAGToB,EAAoB,SAACE,GACzB,OAAOA,EAASC,cAAcC,UAAU,EAAG,IAGvC3C,EAAWxD,IAAQC,IAAI,YACvB6E,EAAY9E,IAAQC,IAAI,iBACxB8E,EAAW/E,IAAQC,IAAI,gBACvB4C,EAAW7C,IAAQC,IAAI,YAE7B,OAAKuD,EACY,aAAbX,EAAgC,kBAAC,IAAD,CAAU3C,GAAG,cAC5C4E,GAAcC,GAAalC,EAY9B,yBAAKzC,UAAU,qDACb,0CACA,uBAAGA,UAAU,OAAb,YAA6B0E,EAA7B,KACA,uBAAG1E,UAAU,OAAb,oCACCsE,EACC,6BACE,uBAAGtE,UAAU,OAAb,sBACqB,gCAASsE,GAD9B,KAGA,kEACsC,kBAAC,EAAD,QAIxC,sDAC0B,kBAAC,EAAD,OAG5B,kBAAC,IAAD,CACEtE,UAAU,oBACVF,GAAI,CACFsG,SAAU,qBACV9C,MAAO,CAAEC,wBAAwB,KAJrC,0CAUA,kBAAC,EAAD,CACEpC,KAAMoB,EACNnB,UAAW,kBAAMoB,GAAa,IAC9BlB,OAAQ,uBAAGtB,UAAU,OAAb,UAAuBiG,EAASvB,UAAhC,YAA6CuB,EAAStB,SAAtD,uBACRpD,OACE,uBAAGvB,UAAU,OAAb,2CAC0C,gCAASiG,EAAS3B,WAD5D,QA3CJ,kBAAC,IAAD,CACExE,GAAI,CACFsG,SAAU,qBACV9C,MAAO,CAAEC,wBAAwB,MAPnB,kBAAC,IAAD,CAAUzD,GAAG,OCdtByG,EAtCiB,WAC9B,IAAMnD,EAAWxD,IAAQC,IAAI,YACvB6E,EAAY9E,IAAQC,IAAI,iBACxB8E,EAAW/E,IAAQC,IAAI,gBACvB4C,EAAW7C,IAAQC,IAAI,YAE7B,OAAKuD,EACY,YAAbX,EAA+B,kBAAC,IAAD,CAAU3C,GAAG,aAC3C4E,GAAcC,GAAalC,EAY9B,yBAAKzC,UAAU,uDACb,0CACA,uBAAGA,UAAU,OAAb,YAA6B0E,EAA7B,KACA,iEACA,uBAAG1E,UAAU,OAAb,wBACA,kBAAC,IAAD,CAAMF,GAAG,qBACP,4BAAQE,UAAU,wCAAlB,cAEF,kBAAC,IAAD,CAAMF,GAAG,qBACP,4BAAQE,UAAU,wCAAlB,cAEF,kBAAC,IAAD,CAAMA,UAAU,eAAeF,GAAG,aAAlC,2BArBA,kBAAC,IAAD,CACEA,GAAI,CACFsG,SAAU,qBACV9C,MAAO,CAAEC,wBAAwB,MAPnB,kBAAC,IAAD,CAAUzD,GAAG,O,gBCwCtB0G,G,OAvCoB,SAAC,GAA4C,IAC1EC,EADgCC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAgC3D,OA3BEH,EADmB,WAAjBE,EAEA,yBACE3G,UAAU,0BAEV6G,IAAKC,OAAQ,mBAAoBF,EAArB,YAAoCD,EAApC,YAAoDD,EAAQK,MAExEC,IAAKN,EAAQO,KACbC,UAAU,UAGY,UAAjBP,EAEP,yBACE3G,UAAU,0BACV6G,IAAKC,OAAQ,mBAAoBF,EAArB,YAAoCD,EAApC,cACZK,IAAI,OACJE,UAAU,UAMA,qDAMd,yBAAKlH,UAAW,cAAiC,WAAjB2G,EAA4B,iBAAmB,oBAC5EF,K,OC0EQU,MA1GiB,SAAC,GAO1B,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,QACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,wBACAC,EAEI,EAFJA,2BACAC,EACI,EADJA,4BACI,EAC8BrI,oBAAS,GADvC,mBACIsI,EADJ,KACcC,EADd,OAEgCvI,mBAAS,GAFzC,mBAEIwI,EAFJ,KAEeC,EAFf,MAuEN,SAAqBC,EAAsBC,GACzC,IAAMC,EAAgBC,mBAGtBtI,qBACE,WAEEqI,EAAcE,QAAUJ,IAE1B,CAAEA,IAIJnI,qBACE,WAKE,GAAc,OAAVoI,EAAgB,CAClB,IAAIxJ,EAAK4J,aALX,WAEEH,EAAcE,YAGaH,GAC3B,OAAO,kBAAMK,cAAc7J,OAG/B,CAAEwJ,IA3FJM,EAAY,WACV,IAAKX,EAAU,CACb,IAAIY,EAAmBV,EAAY,EACnCC,EAAaS,GACbd,EAA2Bc,MAE5B,IAEH3I,qBACE,WAEkC,IAA5B4H,GACFgB,MAGJ,CAAEhB,IAGJ,IAUIiB,EALED,EAAa,WACjBZ,GAAY,GACZE,EAAa,IAIf,GAAIP,EAAiB,CAEnB,IAAMmB,EAAWjI,KAAKC,MAAMmH,EAAY,KAClCc,EAAYd,EAAY,IACxBe,EAAgB,UAAMF,EAAN,YAAkBC,EAAY,GAAK,IAAMA,EAAYA,GAE3EF,EACE,yBAAKxI,UAAU,UACb,uBAAGA,UAAW,gBAAkB4H,GAAa,IAAM,kBAAoB,qBACpEe,GAGFvB,EACAC,EAED,4BAGErH,UAAU,iDACVgC,QA9BgB,WACtByF,GAA4B,GAC5BE,GAAaD,KA8BNA,EAAW,QAAU,cAK5Bc,EACE,yBAAKxI,UAAU,UACZoH,EACAC,GAKP,OAAOmB,G,kBC0CMI,G,OA7GuB,SAAC,GAWhC,IACDxB,EACAC,EAZJX,EAUI,EAVJA,QACAC,EASI,EATJA,aACAW,EAQI,EARJA,gBACAuB,EAOI,EAPJA,yBACAC,EAMI,EANJA,iBACAvB,EAKI,EALJA,wBACAwB,EAII,EAJJA,gBACAC,EAGI,EAHJA,oBACAxB,EAEI,EAFJA,2BACAC,EACI,EADJA,4BAOA,GAAqB,WAAjBd,EAA2B,CAC7B,IAAMsC,EACJ,kBAACC,EAAA,EAAD,CAAS3K,GAAG,IACV,kBAAC2K,EAAA,EAAQC,MAAT,CAAeC,GAAG,MAAlB,sBACA,kBAACF,EAAA,EAAQG,QAAT,KACE,2BACE,qDADF,KACuC3C,EAAQ4C,oBAAoBC,KAAK,OAEvE7C,EAAQ8C,mBAAmBxD,OAAS,EACnC,2BACE,uDADF,KACyCU,EAAQ8C,mBAAmBD,KAAK,OAEvE,OAKVnC,EACE,uBAAGpH,UAAU,OAAb,+BAC+B,IAC7B,kBAACyJ,EAAA,EAAD,CAAgBC,UAAU,MAAMC,QAASV,GACvC,0BAAMhJ,MAAO,CAAE2J,OAAQ,UAAWC,WAAY,SAA9C,uBAHJ,2BAQFxC,EAAU,6EACgB,eAAjBV,GACTS,EAAU,uBAAGpH,UAAU,OAAb,uEACVqH,EAAU,+BAAKX,EAAL,MACgB,YAAjBC,GACTS,EAAU,uBAAGpH,UAAU,OAAb,wCACVqH,EAAU,+BAAKX,EAAL,MACgB,UAAjBC,GACTS,EACE,uBAAGpH,UAAU,OAAb,mCACkC,gCAAS0G,GAD3C,2BAIFW,EAAU,0EACgB,WAAjBV,GACTS,EAAU,uBAAGpH,UAAU,OAAb,oFACVqH,EAAU,+BAAKX,EAAL,OAEVU,EAAU,uBAAGpH,UAAU,OAAb,2BACVqH,EAAU,oEAGZ,IAAMyC,EAAqB,SAACC,GAC1Bf,EAAoBe,EAAQzC,GAC5ByB,KAGF,OACE,yBAAK/I,UAAU,gBACb,4BACEW,KAAK,SACLpC,GAAG,WACHyB,UAAU,+CACVe,MAAM,OACNiJ,UAAYnB,GAA4BvB,GAAoBwB,EAC5D9G,QAAS,kBAAM8H,GAAmB,KANpC,QAWA,6BAAS9J,UAAU,uBACjB,kBAAC,EAAD,CACEoH,QAASA,EACTC,QAASA,EACTC,gBAAiBA,EACjBC,wBAAyBA,EACzBC,2BAA4BA,EAC5BC,4BAA6BA,KAKjC,4BACE9G,KAAK,SACLpC,GAAG,WACHyB,UAAU,gDACVe,MAAM,OACNiJ,UAAYnB,GAA4BvB,GAAoBwB,EAC5D9G,QAAS,kBAAM8H,GAAmB,KANpC,W,yBCjDSG,EARM,SAACC,EAAaC,EAAgBvD,GACjD,IAAMwD,EA5D0B,SAACC,EAASF,GAC1C,IAD6D,EACvDG,EAAsB,CAC1BC,OAAQ,SACRC,WAAY,aACZC,QAAS,qBACTC,MAAO,yBACPC,OAAQ,mBAGJC,EAAM,GATiD,cAW3CT,GAX2C,IAW7D,2BAAkC,CAAC,IAAD,EAAvBU,EAAuB,sBACXR,EAAQQ,IADG,IAChC,2BAAmC,CAAC,IAAzBC,EAAwB,QAC3BC,EAAM,2BAAQD,GAAR,IAAgBE,KAAMV,EAAoBO,GAAM,UAAWC,EAAOf,OAAS,MAAQ,OAEnF,WAARc,EACFD,EAAIK,KAAJ,2BAAcF,GAAd,IAAsBrE,QAASoE,EAAOpE,QAAQO,QAE9C2D,EAAIK,KAAJ,eAAcF,KAPc,gCAX2B,8BAuB7D,OAAOH,EAqCMM,CAA0BhB,EAAaC,GAC9CgB,EAnCoB,SAACP,GAC3B,IAAMQ,EAAU,GAIVC,EAAU,CAAE,OAAQ,UAAW,iBAAkB,WACvDD,EAAQH,KAAKI,EAAQ9B,KAAK,MANS,oBASjBqB,GATiB,yBASxBU,EATwB,QAU3BC,EAASF,EAAQjN,KAAI,SAACoN,GAC1B,IACMC,GAAW,IADHH,EAAIE,IAAW,QACAE,QAAQ,KAAM,OAC3C,MAAM,IAAN,OAAWD,EAAX,QAEFL,EAAQH,KAAKM,EAAOhC,KAAK,OAN3B,2BAAwB,IATW,8BAkBnC,OAAO6B,EAAQ7B,KAAK,MAiBRoC,CAAoBvB,GAEhC3E,QAAQC,IAAI0E,GAhBG,SAACA,EAAMzJ,EAAMiL,GAC5B,IAAMC,EAAO,IAAIC,KAAK,CAAE1B,GAAQ,CAAEzJ,SAC5BoL,EAAMC,OAAOC,IAAIC,gBAAgBL,GACjCM,EAAIC,SAASC,cAAc,KACjCF,EAAEG,aAAa,SAAU,IACzBH,EAAEG,aAAa,OAAQP,GACvBI,EAAEG,aAAa,WAAf,UAA8BV,EAA9B,SACAQ,SAASG,KAAKC,YAAYL,GAC1BA,EAAEM,QACFL,SAASG,KAAKG,YAAYP,GAQ1BQ,CAASxB,EAAK,WAAN,iBAA4BvE,EAA5B,eC4FKgG,G,OAtI2B,SAAC,GASpC,IARLzL,EAQI,EARJA,KACA0L,EAOI,EAPJA,YACA1C,EAMI,EANJA,eACA2C,EAKI,EALJA,0BACAC,EAII,EAJJA,MACA1C,EAGI,EAHJA,QACAvB,EAEI,EAFJA,iBACAlC,EACI,EADJA,YACI,EAEkCxH,oBAAS,GAF3C,mBAEI4N,EAFJ,KAEgBC,EAFhB,OAG0C7N,oBAAS,GAHnD,mBAGI8N,EAHJ,KAGoBC,EAHpB,OAIoC/N,oBAAS,GAJ7C,mBAIIgO,EAJJ,KAIiBC,EAJjB,OAKgCjO,oBAAS,GALzC,mBAKIkO,EALJ,KAKeC,EALf,OAMkCnO,oBAAS,GAN3C,mBAMIoO,EANJ,KAMgBC,EANhB,KAUAC,EAAqBvD,EAAe2C,GAExCnN,qBAEE,WACE,GAAIgO,EAAoBD,GAEtB,IAAK,IAAIE,KAAYD,EACfC,IAAaF,EACfC,EAAoBC,GAAU,IAAG,GAEjCD,EAAoBC,GAAU,IAAG,QAKrC,IAAK,IAAIA,KAAYD,EACnBA,EAAoBC,GAAU,IAAG,KAIvC,CAAEd,IAIJ,IAAMa,EAAsB,CAC1BpD,OAAQ,CAAEyC,EAAYC,GACtBzC,WAAY,CAAE0C,EAAgBC,GAC9B1C,QAAS,CAAE2C,EAAaC,GACxB3C,MAAO,CAAE4C,EAAWC,GACpB5C,OAAQ,CAAE6C,EAAYC,IAGlBnD,EAAsB,CAC1BC,OAAQ,SACRC,WAAY,aACZC,QAAS,qBACTC,MAAO,yBACPC,OAAQ,mBAgCJ4B,EAAOpC,EAAe/L,KAAI,SAACyM,EAAKgD,GACpC,IAAIC,EAAmBxD,EAAoBO,GACvC1J,EAAOwM,EAAoB9C,GAAK,GAChCkD,EAAUJ,EAAoB9C,GAAK,GACnCmD,EAAMH,EAAI,EACd,OACE,yBAAK7N,UAAU,2BAA2BiO,IAAKpD,GAC7C,uBACE7K,UAAU,gBACVgC,QAAS,WACP+L,GAAS5M,KAHb,UAMM6M,EANN,aAMcF,GACZ,0BAAM9N,UAAU,0BACd,uBAAGA,UAAW,mBAAqBmB,EAAO,oBAAsB,2BAGpE,kBAAC+M,EAAA,EAAD,CAAUC,GAAIR,EAAoB9C,GAAK,IA/Cd,SAACA,GAC9B,OACE,wBAAIoD,IAAKpD,GACNkC,EAAMlC,GAAKzM,KAAI,SAACsI,EAASmH,GAExB,IAAIO,EAAkB/D,EAAQQ,IAAQR,EAAQQ,GAAKwD,MAAK,SAACvD,GAAD,OAAYA,EAAOpE,UAAYA,KAEvF,GAAI0H,EAAiB,CACnB,IAAIE,EAAaF,EAAgBrE,OAAS,kBAAC,IAAD,CAAS7J,MAAM,UAAa,kBAAC,IAAD,CAASA,MAAM,YACjFqO,EAAiBH,EAAgBG,eAAhB,WAAqCH,EAAgBG,eAArD,MAA0E,KAC3FC,EAAc9H,EAAQO,MAAQP,EAClC,OACE,wBAAIuH,IAAKJ,GACNS,EADH,IACgBC,EADhB,IACiCC,GAKnC,OACE,wBAAIP,IAAKJ,EAAG5N,MAAO,CAAEC,MAAO,SACzBwG,EAAQO,MAAQP,OA2BmB+H,CAAuB5D,QAKzE,OACE,kBAACrJ,EAAA,EAAD,CAAOL,KAAMA,EAAMM,OAAQoL,EAAa6B,UAAU,EAAO/M,UAAQ,GAC/D,kBAACH,EAAA,EAAMmN,OAAP,KACE,kBAACnN,EAAA,EAAM2H,MAAP,wBAEF,kBAAC3H,EAAA,EAAMI,KAAP,KAAa2K,GACb,kBAAC/K,EAAA,EAAMoN,OAAP,KACE,kBAAC/M,EAAA,EAAD,CACEE,QAAQ,OACRC,QAAS,kBAAMiI,EAAaI,EAASF,EAAgBvD,IACrD3G,MAAO,CAAEE,WAAY2I,EAAmB,UAAY,WAHtD,iBAOA,kBAACjH,EAAA,EAAD,CAAQE,QAAQ,OAAOC,QAAS6K,GAAhC,aC/FOgC,G,OAxCyB,SAAC,GAAyD,IAAvDlI,EAAsD,EAAtDA,aAAcmI,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAAgB,EACjD5P,oBAAS,GADwC,mBACvF6P,EADuF,KACvEC,EADuE,KAG/FvP,qBAAU,WACJC,IAAQC,IAAI,YACdqP,GAAkB,KAEnB,IAEH,IAcInP,EACE+N,EAfiD,CACrDvD,OAAQ,SACRC,WAAY,aACZC,QAAS,qBACTC,MAAO,yBACPC,OAAQ,mBAUmChE,GAO7C,OALE5G,EADE+N,EACG,wBAAoBA,EAApB,aAAyCiB,EAAzC,YAAoDD,EAApD,KAEG,eAIR,yBAAK9O,UAAW,mBAAsBiP,EAA2B,KAAV,UACrD,uBAAGjP,UAAU,sBAAsBgC,QAhBnB,WAClBpC,IAAQW,IAAI,UAAW,QACvB2O,GAAkB,GAClBF,MAcKjP,MC7BMoP,G,OAVqB,SAAC,GAAgB,IAAd9N,EAAa,EAAbA,OACrC,OACE,6BACE,yBAAKrB,UAAW,aAAcgC,QAASX,GACrC,uBAAGrB,UAAU,mBAAb,YCmFOoP,G,OA7FuB,CACpCC,EAAG,CACD9E,OAAQ,CACN,CACEtD,KAAM,QACNF,IAAK,iBACLuC,oBAAqB,CAAE,YAAa,QAAS,kBAAmB,qBAChEE,mBAAoB,CAAE,eAAgB,iBAAkB,WAE1D,CACEvC,KAAM,YACNF,IAAK,qBACLuC,oBAAqB,CAAE,aACvBE,mBAAoB,IAEtB,CACEvC,KAAM,MACNF,IAAK,eACLuC,oBAAqB,CAAE,MAAO,gBAAiB,gBAAiB,mBAChEE,mBAAoB,CAAE,cAAe,eAAgB,iBAEvD,CACEvC,KAAM,OACNF,IAAK,gBACLuC,oBAAqB,CACnB,YACA,YACA,+BACA,+BAEFE,mBAAoB,IAEtB,CACEvC,KAAM,OACNF,IAAK,gBACLuC,oBAAqB,CAAE,OAAQ,gBAC/BE,mBAAoB,CAAE,gBAG1BgB,WAAY,CAAE,cAAe,kDAC7BC,QAAS,CAAE,uBACXC,MAAO,CAAE,iBAAkB,QAAS,YAAa,OACjDC,OAAQ,CACN,wBACA,iCACA,mEAGJ2E,EAAG,CACD/E,OAAQ,CACN,CACEtD,KAAM,SACNF,IAAK,kBACLuC,oBAAqB,CAAE,SAAU,cAAe,sBAAuB,mBACvEE,mBAAoB,IAEtB,CACEvC,KAAM,aACNF,IAAK,cACLuC,oBAAqB,CAAE,aAAc,KAAM,cAAe,SAAU,aAAc,YAAa,WAC/FE,mBAAoB,CAAE,WAExB,CACEvC,KAAM,UACNF,IAAK,mBACLuC,oBAAqB,CAAE,WACvBE,mBAAoB,IAEtB,CACEvC,KAAM,QACNF,IAAK,iBACLuC,oBAAqB,CAAE,QAAS,eAAgB,iBAChDE,mBAAoB,CAAE,gBAAiB,gBAEzC,CACEvC,KAAM,YACNF,IAAK,qBACLuC,oBAAqB,CAAE,YAAa,sBACpCE,mBAAoB,CAAE,UAG1BgB,WAAY,CAAE,cAAe,kDAC7BC,QAAS,CAAE,uBACXC,MAAO,CAAE,MAAO,OAAQ,MAAO,UAC/BC,OAAQ,CACN,sBACA,mCACA,6EAGJ4E,kBAAmB,CAAE,SAAU,aAAc,UAAW,QAAS,YCqFpDC,EA7JwB,SAACtN,GAAU,MAEhB9C,mBAAsB,IAFN,mBAExCiL,EAFwC,KAE/BoF,EAF+B,OAGErQ,oBAAS,GAHX,mBAGxC0J,EAHwC,KAGtB4G,EAHsB,OAIQtQ,mBAAS,GAJjB,mBAIxCuQ,EAJwC,KAInBC,EAJmB,OAKkBxQ,mBAAS,GAL3B,mBAKxCyQ,EALwC,KAKdC,EALc,OAOU1Q,oBAAS,GAPnB,mBAOxC2Q,EAPwC,KAOlBC,EAPkB,OAQA5Q,oBAAS,GART,mBAQxC6Q,EARwC,KAQvBC,EARuB,OAUkB9Q,oBAAS,GAV3B,mBAUxCyJ,EAVwC,KAUdpB,EAVc,OAWgBrI,mBAAS,GAXzB,mBAWxCmI,EAXwC,KAWfC,EAXe,KAchD7H,qBACE,WAC8B,IAAxBgQ,GAA0D,IAA7BE,GAC/BG,GAAwB,KAG5B,CAAEH,IAIJlQ,qBACE,WACMmJ,IAEFkH,GAAwB,GACxBvK,QAAQC,IAAI2E,MAGhB,CAAEvB,IAGJ,IAAM1F,EAAWxD,IAAQC,IAAI,YACvB8C,EAAgB/C,IAAQC,IAAI,iBAC5BgD,EAAejD,IAAQC,IAAI,gBAC3B4C,EAAW7C,IAAQC,IAAI,YAE7B,IAAKuD,EAAU,OAAO,kBAAC,IAAD,CAAUtD,GAAG,MACnC,IAAK6C,IAAkBE,GAA6B,aAAbJ,EAAyB,OAAO,kBAAC,IAAD,CAAU3C,GAAG,uBAGpF,IAAMqQ,EAAejO,EAAMmB,SAAS+C,SAASgK,MAAM,KAC7CxJ,EAAyBuJ,EAAaA,EAAanK,OAAS,GAG5D+G,EAAoBqC,EAASxI,GAC7BuD,GAAiBiF,EAAQ,kBAG3BiB,GAA8B,GAC9BC,GAAiD,GAEjDT,GAA4B,GAAKF,GAAuB,IAC1DU,GAAsBlG,GAAe0F,GACrCS,GAAiBvD,EAAMsD,IAAqBV,IAI9C,IA2BMY,GAAqB,WACrBZ,EAAsB,GAAK5C,EAAMsD,IAAqBrK,QAExD4J,EAAuB,GACnBC,EAA2B,GAAK1F,GAAenE,QACjD0J,GAAoB,GACpBE,GAAwB,GACxBE,GAA6B,IAE7BA,EAA4BD,EAA2B,IAGzDD,EAAuBD,EAAsB,IAIjD,OACE,yBAAK3P,UAAU,iBACb,kBAAC,EAAD,CAAYqB,OAAQ,kBAAM6O,GAAmB,MAE7C,kBAAC,EAAD,CACEvJ,aAAc0J,GACdrB,UAAW,kBAAMgB,GAAwB,IACzClB,cAAe/B,EAAMsD,KAAwBtD,EAAMsD,IAAqBrK,OACxE+I,QAASY,EAAsB,IAGjC,kBAAC,EAAD,CAAW/I,YAAaA,EAAaD,aAAc0J,GAAqB3J,QAAS4J,KAEjF,kBAAC,EAAD,CAEExH,iBAAkBA,EAClBpC,QAAS4J,GACT3J,aAAc0J,GACd/I,gBAAyC,WAAxB+I,IAA4D,UAAxBA,GAErDtH,gBA3CkB,WACtBwH,KACA9I,GAA4B,GAC5BD,EAA2B,IAyCvBwB,oBAhEsB,SAACe,EAAiBzC,GAC5C,IAAMkJ,EAA2B,CAC/BzG,OAAQA,EACRrD,QAAS4J,GACT/B,eAAgBjH,EAAkBC,EAA0B,IAAM,MAG9DkJ,EAAuB,eAAQpG,GAEjCoG,EAAWJ,IAEbI,EAAWJ,IAAX,sBAAuCI,EAAWJ,KAAlD,CAAwEG,IAGxEC,EAAWJ,IAAuB,CAAEG,GAGtCf,EAAWgB,IAiDPlJ,wBAAyBA,EACzBC,2BAA4BA,EAC5BqB,yBAA0BA,EAC1BpB,4BAA6BA,IAG/B,kBAAC,EAAD,CACEtG,KAAM4O,EACNlD,YAAa,kBAAMmD,GAAwB,IAC3ClH,iBAAkBA,EAClBiE,MAAOA,EACP1C,QAASA,EACTyC,0BAA2B+C,EAA2B,EACtD1F,eAAgBA,GAChBvD,YAAaA,IAGf,kBAAC,EAAD,CACEzF,KAAM8O,EACN7O,UAAW,kBAAM8O,GAAmB,IACpCjP,MAAM,iCACNC,MAAM,kCACNG,OAAQa,EAAMwO,QAAQC,WC9IfC,G,OAhBO,WACpB,OACE,yBAAK5Q,UAAU,wDACb,kBAAC,IAAD,CAAY6Q,SAAS,KACnB,kBAAC,IAAD,CAAOrI,UAAWsI,EAAMC,OAAK,EAACC,KAAK,MACnC,kBAAC,IAAD,CAAOxI,UAAWvG,EAAkB8O,OAAK,EAACC,KAAK,uBAC/C,kBAAC,IAAD,CAAOxI,UAAWnC,EAAa0K,OAAK,EAACC,KAAK,aAC1C,kBAAC,IAAD,CAAOxI,UAAWnE,EAAc0M,OAAK,EAACC,KAAK,cAC3C,kBAAC,IAAD,CAAOxI,UAAWjC,EAAewK,OAAK,EAACC,KAAK,oBAC5C,kBAAC,IAAD,CAAOxI,UAAWgH,EAAeuB,OAAK,EAACC,KAAK,sBAC5C,kBAAC,IAAD,CAAOxI,UAAWgH,EAAeuB,OAAK,EAACC,KAAK,0B,OCfpDC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF9E,SAAS+E,eAAe,U,wCCV1BlS,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.93f9dbb1.chunk.js","sourcesContent":["var map = {\n\t\"./versionA/naming/test-blur.jpg\": 133,\n\t\"./versionA/naming/test-croc.jpg\": 134,\n\t\"./versionA/naming/test-fork.jpg\": 135,\n\t\"./versionA/naming/test-pen.jpg\": 136,\n\t\"./versionA/naming/test-phone.jpg\": 137,\n\t\"./versionA/naming/test-pineapple.jpg\": 138,\n\t\"./versionA/naming/test.jpg\": 139,\n\t\"./versionA/picID/test.png\": 78,\n\t\"./versionB/naming/test-blur.jpg\": 140,\n\t\"./versionB/naming/test-butterfly.jpg\": 141,\n\t\"./versionB/naming/test-giraffe.jpg\": 142,\n\t\"./versionB/naming/test-knife.jpg\": 143,\n\t\"./versionB/naming/test-pencil.jpg\": 144,\n\t\"./versionB/naming/test-tv.jpg\": 145,\n\t\"./versionB/naming/test.jpg\": 146,\n\t\"./versionB/picID/test.png\": 79\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 132;","module.exports = __webpack_public_path__ + \"static/media/test-blur.5ee5746f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-croc.097fa81b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-fork.e3c88a8c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-pen.7b418cd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-phone.1080adcb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-pineapple.ae8de97a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test.42b74cff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-blur.532c3830.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-butterfly.65990f4c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-giraffe.26fdbe93.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-knife.d1bad894.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-pencil.57c2245c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test-tv.bee55f9e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test.43e90790.jpg\";","var map = {\n\t\"./versionA/picID/test.png\": 78,\n\t\"./versionB/picID/test.png\": 79\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 147;","import React, { useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Dot } from 'react-animated-dots';\r\nimport Cookies from 'js-cookie';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport ws from '../../websocket';\r\n\r\nconst AuthMenu: React.FC = () => {\r\n  const [ password, setPassword ] = useState('');\r\n  const [ isLoading, setIsLoading ] = useState(false);\r\n  const [ hadEnteredWrongPass, setHadEnteredWrongPass ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // if (ws.connected) ws.disconnect();\r\n  }, []);\r\n\r\n  // slightly sus (actually very sus) to put the password here but we can implement real auth later\r\n  const SECRET = 'topsecret88';\r\n  const loggedIn = Cookies.get('loggedIn');\r\n\r\n  if (loggedIn) return <Redirect to=\"/user-registration\" />;\r\n\r\n  const onSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (password === '') return;\r\n    setIsLoading(true);\r\n\r\n    // redirect after random time, to make it seem like theres something going on in a backend >:)\r\n    setTimeout(() => {\r\n      if (password === SECRET) {\r\n        // @ts-ignore\r\n        Cookies.set('loggedIn', true);\r\n      } else {\r\n        setPassword('');\r\n        setHadEnteredWrongPass(true);\r\n      }\r\n      setIsLoading(false);\r\n    }, Math.floor(Math.random() * 1000));\r\n  };\r\n\r\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  let label;\r\n  if (hadEnteredWrongPass && !isLoading) {\r\n    label = (\r\n      <p className=\"subtle-label\" style={{ color: 'red' }}>\r\n        Wrong key!\r\n      </p>\r\n    );\r\n  } else if (isLoading) {\r\n    label = (\r\n      <p className=\"subtle-label\">\r\n        <Dot>•</Dot>\r\n        <Dot>•</Dot>\r\n        <Dot>•</Dot>\r\n      </p>\r\n    );\r\n  } else {\r\n    label = (\r\n      <p className=\"subtle-label\" style={{ visibility: 'hidden' }}>\r\n        a\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"AuthMenu\">\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Access Key</label>\r\n          <input type=\"password\" className=\"form-control\" onChange={onPasswordChange} value={password} />\r\n          {label}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthMenu;\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ninterface Props {\r\n  text1: string;\r\n  text2?: string;\r\n  show: boolean;\r\n  hideModal(): void; // Callback fired when the 'No' button or non-static backdrop is clicked\r\n  action(): void; // Callback fired when the 'Yes' button is clicked\r\n}\r\n\r\nconst YesNoConfirmModal: React.FC<Props> = ({ text1, text2, show, hideModal, action }) => {\r\n  let label1 = text1 ? <p className=\"m-0\">{text1}</p> : null;\r\n  let label2 = text2 ? <p className=\"m-0\">{text2}</p> : null;\r\n\r\n  return (\r\n    <Modal show={show} onHide={hideModal} size=\"sm\" centered>\r\n      <Modal.Body>\r\n        {label1}\r\n        {label2}\r\n        <Button style={{ float: 'right' }} variant=\"secondary-outline\" onClick={action}>\r\n          Yes\r\n        </Button>\r\n        <Button style={{ float: 'right' }} variant=\"secondary-outline\" onClick={hideModal}>\r\n          No\r\n        </Button>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default YesNoConfirmModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport YesNoConfirmModal from '../../components/YesNoConfirmModal/YesNoConfirmModal';\r\nimport Cookies from 'js-cookie';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport ws from '../../websocket';\r\n\r\ntype Props = any;\r\n\r\nconst UserRegistration: React.FC<Props> = (props) => {\r\n  const [ toUserMenus, setToUserMenus ] = useState(false);\r\n  const [ toAuth, setToAuth ] = useState(false);\r\n  const [ showModal, setShowModal ] = useState(false);\r\n  const [ userType, setUserType ] = useState('examiner');\r\n  const [ userFirstName, setUserFirstName ] = useState('');\r\n  const [ userLastName, setUserLastName ] = useState('');\r\n  const [ hadSubmittedEmptyForm, setHadSubmittedEmptyForm ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setUserFirstName(prevUserFirstName || '');\r\n    setUserLastName(prevUserLastName || '');\r\n    setUserType(prevUserType || 'examiner');\r\n  }, []);\r\n\r\n  const loggedIn = Cookies.get('loggedIn');\r\n  const prevUserFirstName = Cookies.get('userFirstName');\r\n  const prevUserLastName = Cookies.get('userLastName');\r\n  const prevUserType = Cookies.get('userType');\r\n\r\n  // redirect logic:\r\n\r\n  const userWantsToReenterUserInfo = (): boolean => {\r\n    return props.location.state && props.location.state.wantsToReenterUserInfo;\r\n  };\r\n\r\n  const userInfoIsComplete = (): boolean => {\r\n    // @ts-ignore\r\n    return prevUserFirstName && prevUserLastName && prevUserType;\r\n  };\r\n\r\n  const signOut = () => {\r\n    Cookies.remove('loggedIn');\r\n    Cookies.remove('userFirstName');\r\n    Cookies.remove('userLastName');\r\n    Cookies.remove('userType');\r\n    Cookies.remove('noPulse');\r\n    setToAuth(true);\r\n  };\r\n\r\n  if (!loggedIn || toAuth) return <Redirect to=\"/\" />;\r\n  if (toUserMenus || (!userWantsToReenterUserInfo() && userInfoIsComplete()))\r\n    return <Redirect to={`/${prevUserType}`} />;\r\n\r\n  // form control:\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (userFirstName && userLastName && userType) {\r\n      Cookies.set('userFirstName', userFirstName.trim());\r\n      Cookies.set('userLastName', userLastName.trim());\r\n      Cookies.set('userType', userType);\r\n      setToUserMenus(true);\r\n      setHadSubmittedEmptyForm(false);\r\n    } else {\r\n      setHadSubmittedEmptyForm(true);\r\n    }\r\n  };\r\n\r\n  const onUserTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setUserType(e.target.value);\r\n  };\r\n\r\n  const onUserFirstNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUserFirstName(e.target.value);\r\n  };\r\n\r\n  const onUserLastNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUserLastName(e.target.value);\r\n  };\r\n\r\n  // form labels:\r\n\r\n  let userTypeLabel = '';\r\n  if (userType === 'examiner') userTypeLabel = 'I am an...';\r\n  else userTypeLabel = 'I am a...';\r\n\r\n  let dangerLabel: JSX.Element;\r\n  if (hadSubmittedEmptyForm) {\r\n    dangerLabel = (\r\n      <p style={{ color: 'red' }} className=\"subtle-label\">\r\n        Please complete the form.\r\n      </p>\r\n    );\r\n  } else {\r\n    dangerLabel = (\r\n      <p className=\"subtle-label\" style={{ visibility: 'hidden' }}>\r\n        a\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"UserRegistration\">\r\n      <h4>LASTen App</h4>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>{userTypeLabel}</label>\r\n          <select className=\"form-control\" onChange={onUserTypeChange} value={userType}>\r\n            <option value=\"examiner\">Examiner</option>\r\n            <option value=\"patient\">Patient</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>My name is...</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"First Name\"\r\n            onChange={onUserFirstNameChange}\r\n            value={userFirstName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Last Name\"\r\n            onChange={onUserLastNameChange}\r\n            value={userLastName}\r\n          />\r\n        </div>\r\n        {dangerLabel}\r\n        <button className=\"btn btn-menu btn-outline-primary\">Register</button>\r\n      </form>\r\n      <a className=\"w-100 subtle-label\" onClick={() => setShowModal(true)}>\r\n        Click here to sign out and erase session history.\r\n      </a>\r\n\r\n      <YesNoConfirmModal\r\n        show={showModal}\r\n        hideModal={() => setShowModal(false)}\r\n        text1=\"Are you sure you want to sign out?\"\r\n        action={signOut}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserRegistration;\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ninterface Props {\r\n  label1: JSX.Element;\r\n  label2?: JSX.Element;\r\n  show: boolean;\r\n  hideModal(): void; // Callback fired when the header closeButton or non-static backdrop is clicked\r\n  onExit?(): void; // Callback fired right before the Modal transitions out\r\n}\r\n\r\nconst InfoAlertModal: React.FC<Props> = ({ label1, label2, show, hideModal, onExit }) => {\r\n  return (\r\n    <Modal show={show} onHide={hideModal} onExit={onExit} size=\"sm\" centered>\r\n      <Modal.Body>\r\n        {label1}\r\n        {label2}\r\n        <Button style={{ float: 'right' }} variant=\"secondary-outline\" onClick={hideModal}>\r\n          Ok\r\n        </Button>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InfoAlertModal;\r\n","import React from 'react';\r\nimport { Dot } from 'react-animated-dots';\r\n\r\nconst LoadingDots = () => {\r\n  return (\r\n    <span style={{ fontSize: '2em' }}>\r\n      <Dot>.</Dot>\r\n      <Dot>.</Dot>\r\n      <Dot>.</Dot>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default LoadingDots;\r\n","import io from 'socket.io-client';\r\n// const ws = io.connect('http://localhost:4000');\r\nconst ws = io.connect('https://last-app-server.herokuapp.com/');\r\nexport default ws;\r\n","import React, { FormEvent, useEffect, useState } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport InfoAlertModal from '../../components/InfoAlertModal/InfoAlertModal';\r\nimport LoadingDots from '../../components/LoadingDots/LoadingDots';\r\nimport Cookies from 'js-cookie';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../Menus.css';\r\n\r\nimport { Patient } from '../../types/User';\r\n\r\nimport ws from '../../websocket';\r\n\r\nconst ExaminerMenu: React.FC = () => {\r\n  // network connection state\r\n  const [ sessionID, setSessionID ] = useState(''); // first 5 letters of socket id\r\n  const [ patientSessionIDToConnectTo, setPatientSessionIDToConnectTo ] = useState('');\r\n  const [ patient, setPatient ] = useState<Patient>({ firstName: '', lastName: '', sessionID: '' });\r\n  // modal (popups) state\r\n  const [ showPatientFoundModal, setShowPatientFoundModal ] = useState(false);\r\n  const [ showPatientNotFoundModal, setShowPatientNotFoundModal ] = useState(false);\r\n  const [ showInvalidSessionIDModal, setShowInvalidSessionIDModal ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (ws.connected) socketSetup();\r\n\r\n    ws.on('connect', socketSetup);\r\n    ws.on('reconnect', socketSetup);\r\n    ws.on('disconnect', socketCleanup);\r\n\r\n    return () => {\r\n      ws.off('connect');\r\n      ws.off('reconnect');\r\n      ws.off('disconnect');\r\n    };\r\n  }, []);\r\n\r\n  const socketSetup = () => {\r\n    console.log(ws);\r\n    setSessionID(generateSessionID(ws.id));\r\n    ws.emit(`examinerRegistration`, firstName, lastName);\r\n  };\r\n\r\n  const socketCleanup = () => {\r\n    setSessionID('');\r\n  };\r\n\r\n  // MOVE TO SERVERSIDE (to generate session IDs)\r\n  const generateSessionID = (socketID: string): string => {\r\n    return socketID.toLowerCase().substring(0, 5);\r\n  };\r\n\r\n  const attemptConnectionWithPatient = (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (patientSessionIDToConnectTo.length < 5) {\r\n      setShowInvalidSessionIDModal(true);\r\n    } else {\r\n      let examiner = { firstName, lastName, sessionID };\r\n      ws.emit('getPatientWithSessionID', patientSessionIDToConnectTo, examiner, (patient: any) => {\r\n        if (patient) {\r\n          setPatient(patient);\r\n          setShowPatientFoundModal(true);\r\n        } else {\r\n          setShowPatientNotFoundModal(true);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const loggedIn = Cookies.get('loggedIn');\r\n  const firstName = Cookies.get('userFirstName');\r\n  const lastName = Cookies.get('userLastName');\r\n  const userType = Cookies.get('userType');\r\n\r\n  if (!loggedIn) return <Redirect to=\"/\" />;\r\n  if (userType === 'patient') return <Redirect to=\"/patient\" />;\r\n  if (!firstName || !lastName || !userType) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: '/user-registration',\r\n          state: { wantsToReenterUserInfo: true }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"ExaminerMenu d-flex flex-column align-items-center\">\r\n      <h4>LASTen App</h4>\r\n      <p className=\"m-0\">Welcome, {firstName}.</p>\r\n      <p className=\"m-0\">You are registered as an examiner.</p>\r\n      {sessionID ? (\r\n        <div>\r\n          <p>\r\n            Your session ID is <strong>{sessionID}</strong>.\r\n          </p>\r\n          <div className=\"d-flex flex-column\">\r\n            <form onSubmit={attemptConnectionWithPatient}>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  className=\"form-control\"\r\n                  style={{ textAlign: 'center' }}\r\n                  placeholder=\"Enter Patient Session ID\"\r\n                  maxLength={5}\r\n                  value={patientSessionIDToConnectTo}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPatientSessionIDToConnectTo(e.target.value)}\r\n                />\r\n              </div>\r\n              <button className=\"btn btn-menu btn-outline-primary\">Connect to Patient</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>\r\n          Connecting to the server<LoadingDots />\r\n        </p>\r\n      )}\r\n      <Link className=\"mt-3 subtle-label\" to=\"/examiner/tests\">\r\n        Can't connect? Click here to conduct an offline test.\r\n      </Link>\r\n      <Link\r\n        className=\"mt-1 subtle-label\"\r\n        to={{\r\n          pathname: '/user-registration',\r\n          state: { wantsToReenterUserInfo: true }\r\n        }}\r\n      >\r\n        Click here to re-enter your user info.\r\n      </Link>\r\n\r\n      <InfoAlertModal\r\n        show={showPatientFoundModal}\r\n        hideModal={() => setShowPatientFoundModal(false)}\r\n        label1={<p className=\"m-0\">Patient has been found!</p>}\r\n        label2={\r\n          <p className=\"m-0\">\r\n            Please confirm that their name is{' '}\r\n            <strong>\r\n              {patient.firstName} {patient.lastName}\r\n            </strong>.\r\n          </p>\r\n        }\r\n      />\r\n\r\n      <InfoAlertModal\r\n        show={showPatientNotFoundModal}\r\n        hideModal={() => setShowPatientNotFoundModal(false)}\r\n        onExit={() => {\r\n          setPatientSessionIDToConnectTo('');\r\n        }}\r\n        label1={\r\n          <p className=\"m-0\">\r\n            Patient with session ID <strong>{patientSessionIDToConnectTo}</strong> does not exist or has disconnected.\r\n          </p>\r\n        }\r\n      />\r\n\r\n      <InfoAlertModal\r\n        show={showInvalidSessionIDModal}\r\n        hideModal={() => setShowInvalidSessionIDModal(false)}\r\n        onExit={() => {\r\n          setPatientSessionIDToConnectTo('');\r\n        }}\r\n        label1={<p className=\"m-0\">Please enter a 5-character session ID.</p>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExaminerMenu;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport InfoAlertModal from '../../components/InfoAlertModal/InfoAlertModal';\r\nimport LoadingDots from '../../components/LoadingDots/LoadingDots';\r\nimport Cookies from 'js-cookie';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../Menus.css';\r\n\r\nimport { Examiner } from '../../types/User';\r\n\r\nimport ws from '../../websocket';\r\n\r\nconst PatientMenu = () => {\r\n  // patient session\r\n  const [ sessionID, setSessionID ] = useState('');\r\n  // examiner session\r\n  const [ examiner, setExaminer ] = useState<Examiner>({ firstName: '', lastName: '', sessionID: '' });\r\n  const [ showModal, setShowModal ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (ws.connected) socketSetup();\r\n\r\n    ws.on('connect', socketSetup);\r\n    ws.on('reconnect', socketSetup);\r\n    ws.on('disconnect', socketCleanup);\r\n    ws.on('requestFromExaminer', (examiner: any) => {\r\n      setExaminer(examiner);\r\n      setShowModal(true);\r\n    });\r\n\r\n    return () => {\r\n      ws.off('connect');\r\n      ws.off('reconnect');\r\n      ws.off('disconnect');\r\n      ws.off('notify');\r\n    };\r\n  }, []);\r\n\r\n  const socketSetup = () => {\r\n    setSessionID(generateSessionID(ws.id));\r\n    ws.emit(`patientRegistration`, firstName, lastName);\r\n    // TODO: listen for examiner requests\r\n  };\r\n\r\n  const socketCleanup = () => {\r\n    setSessionID('');\r\n  };\r\n\r\n  const generateSessionID = (socketID: string) => {\r\n    return socketID.toLowerCase().substring(0, 5); // (TODO: SERVER SHOULD PASS THIS TO CLIENT, not set here)\r\n  };\r\n\r\n  const loggedIn = Cookies.get('loggedIn');\r\n  const firstName = Cookies.get('userFirstName');\r\n  const lastName = Cookies.get('userLastName');\r\n  const userType = Cookies.get('userType');\r\n\r\n  if (!loggedIn) return <Redirect to=\"/\" />;\r\n  if (userType === 'examiner') return <Redirect to=\"/examiner\" />;\r\n  if (!firstName || !lastName || !userType) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: '/user-registration',\r\n          state: { wantsToReenterUserInfo: true }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"PatientMenu d-flex flex-column align-items-center\">\r\n      <h4>LASTen App</h4>\r\n      <p className=\"m-0\">Welcome, {firstName}.</p>\r\n      <p className=\"m-0\">You are registered as a patient.</p>\r\n      {sessionID ? (\r\n        <div>\r\n          <p className=\"m-0\">\r\n            Your session ID is <strong>{sessionID}</strong>.\r\n          </p>\r\n          <p>\r\n            Awaiting examiner connection request<LoadingDots />\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <p>\r\n          Connecting to the server<LoadingDots />\r\n        </p>\r\n      )}\r\n      <Link\r\n        className=\"mt-1 subtle-label\"\r\n        to={{\r\n          pathname: '/user-registration',\r\n          state: { wantsToReenterUserInfo: true }\r\n        }}\r\n      >\r\n        Click here to re-enter your user info.\r\n      </Link>\r\n\r\n      <InfoAlertModal\r\n        show={showModal}\r\n        hideModal={() => setShowModal(false)}\r\n        label1={<p className=\"m-0\">{`${examiner.firstName} ${examiner.lastName} wants to connect!`}</p>}\r\n        label2={\r\n          <p className=\"m-0\">\r\n            Please confirm that their session ID is <strong>{examiner.sessionID}</strong>.\r\n          </p>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientMenu;\r\n","import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst ExaminerTests: React.FC = () => {\r\n  const loggedIn = Cookies.get('loggedIn');\r\n  const firstName = Cookies.get('userFirstName');\r\n  const lastName = Cookies.get('userLastName');\r\n  const userType = Cookies.get('userType');\r\n\r\n  if (!loggedIn) return <Redirect to=\"/\" />;\r\n  if (userType === 'patient') return <Redirect to=\"/patient\" />;\r\n  if (!firstName || !lastName || !userType) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: '/user-registration',\r\n          state: { wantsToReenterUserInfo: true }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"ExaminerTests d-flex flex-column align-items-center\">\r\n      <h4>LASTen App</h4>\r\n      <p className=\"m-0\">Welcome, {firstName}.</p>\r\n      <p>You are registered as an examiner.</p>\r\n      <p className=\"m-0\">Select Test Version:</p>\r\n      <Link to=\"/examiner/tests/A\">\r\n        <button className=\"btn btn-menu btn-outline-primary m-2\">Version A</button>\r\n      </Link>\r\n      <Link to=\"/examiner/tests/B\">\r\n        <button className=\"btn btn-menu btn-outline-primary m-2\">Version B</button>\r\n      </Link>\r\n      <Link className=\"subtle-label\" to=\"/examiner\">\r\n        Click here to go back.\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExaminerTests;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './ViewPanel.css';\r\n\r\nimport { GenericSubtest, NamingSubtest } from '../../types/LASTDataFormat';\r\n\r\ninterface Props {\r\n  subtest: GenericSubtest | NamingSubtest;\r\n  testCategory: string;\r\n  testVersion: 'A' | 'B';\r\n}\r\n\r\nconst ViewPanel: React.FC<Props> = ({ subtest, testCategory, testVersion }) => {\r\n  let viewElement: JSX.Element;\r\n\r\n  // TODO: modularize this better\r\n  if (testCategory === 'naming') {\r\n    viewElement = (\r\n      <img\r\n        className=\"ViewPanel-Image fade-in\"\r\n        // @ts-ignore\r\n        src={require(`../../img/version${testVersion}/${testCategory}/${subtest.jpg}`)}\r\n        // @ts-ignore\r\n        alt={subtest.item}\r\n        draggable=\"false\"\r\n      />\r\n    );\r\n  } else if (testCategory === 'picID') {\r\n    viewElement = (\r\n      <img\r\n        className=\"ViewPanel-Image fade-in\"\r\n        src={require(`../../img/version${testVersion}/${testCategory}/test.png`)}\r\n        alt=\"test\"\r\n        draggable=\"false\"\r\n      />\r\n    );\r\n  } else {\r\n    // placeholder if no image\r\n    // viewElement = <p>\"{subtest}\"</p>;\r\n    viewElement = <p>Déconeuro™ Lab</p>;\r\n  }\r\n\r\n  // on mount and on orientation change, format test image height\r\n\r\n  return (\r\n    <div className={'ViewPanel ' + (testCategory === 'naming' ? 'ViewPanel-Dark' : 'ViewPanel-Light')}>\r\n      {viewElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewPanel;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Prompt.css';\r\n\r\ninterface Props {\r\n  prompt1: JSX.Element;\r\n  prompt2: JSX.Element;\r\n  isTimerRequired: boolean;\r\n  currentSubtestMSElapsed: number;\r\n  // react setState hooks:\r\n  setCurrentSubtestMSElapsed: React.Dispatch<React.SetStateAction<number>>;\r\n  setCurrentSubtestHasStarted: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst Prompt: React.FC<Props> = ({\r\n  prompt1,\r\n  prompt2,\r\n  isTimerRequired,\r\n  currentSubtestMSElapsed,\r\n  setCurrentSubtestMSElapsed,\r\n  setCurrentSubtestHasStarted\r\n}) => {\r\n  const [ isPaused, setIsPaused ] = useState(true);\r\n  const [ msElapsed, setMsElapsed ] = useState(0); // miliseconds\r\n\r\n  useInterval(() => {\r\n    if (!isPaused) {\r\n      let updatedMsElapsed = msElapsed + 1;\r\n      setMsElapsed(updatedMsElapsed);\r\n      setCurrentSubtestMSElapsed(updatedMsElapsed);\r\n    }\r\n  }, 10);\r\n\r\n  useEffect(\r\n    () => {\r\n      // reset timer if the current subtest timer has been reset (ie. going to the next subtest)\r\n      if (currentSubtestMSElapsed === 0) {\r\n        resetTimer();\r\n      }\r\n    },\r\n    [ currentSubtestMSElapsed ]\r\n  );\r\n\r\n  const onTimerBtnClick = () => {\r\n    setCurrentSubtestHasStarted(true);\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setIsPaused(true);\r\n    setMsElapsed(0);\r\n  };\r\n\r\n  let component: JSX.Element;\r\n  if (isTimerRequired) {\r\n    // calculate time to display\r\n    const currentS = Math.floor(msElapsed / 100); // seconds\r\n    const currentMs = msElapsed % 100; // milliseconds\r\n    const timeElapsedLabel = `${currentS}:${currentMs < 10 ? '0' + currentMs : currentMs}`;\r\n\r\n    component = (\r\n      <div className=\"Prompt\">\r\n        <p className={'Prompt-Time ' + (msElapsed >= 500 ? 'Prompt-Time-Bad' : 'Prompt-Time-Good')}>\r\n          {timeElapsedLabel}\r\n        </p>\r\n\r\n        {prompt1}\r\n        {prompt2}\r\n\r\n        <button\r\n          // deconeuro blue:\r\n          // style={{ backgroundColor: '#65ceca' }}\r\n          className=\"btn btn-test btn-primary btn-control Timer-Btn\"\r\n          onClick={onTimerBtnClick}\r\n        >\r\n          {isPaused ? 'Start' : 'Stop'}\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    component = (\r\n      <div className=\"Prompt\">\r\n        {prompt1}\r\n        {prompt2}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return component;\r\n};\r\n\r\n// custom react hook: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback: () => void, delay: number) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(\r\n    () => {\r\n      // @ts-ignore\r\n      savedCallback.current = callback;\r\n    },\r\n    [ callback ]\r\n  );\r\n\r\n  // Set up the interval.\r\n  useEffect(\r\n    () => {\r\n      function tick() {\r\n        // @ts-ignore\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    },\r\n    [ delay ]\r\n  );\r\n}\r\n\r\nexport default Prompt;\r\n","import React from 'react';\r\nimport Prompt from '../Prompt/Prompt';\r\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './ControlPanel.css';\r\n\r\ninterface Props {\r\n  subtest: any; // string | NamingSubtest\r\n  testCategory: string;\r\n  isTimerRequired: boolean;\r\n  entireTestIsDone: boolean;\r\n  currentSubtestHasStarted: boolean;\r\n  currentSubtestMSElapsed: number;\r\n  // functions for subtests:\r\n  goToNextSubtest: () => void;\r\n  recordSubtestResult: (passed: boolean, isTimerRequired: boolean) => void;\r\n  // react setState hooks:\r\n  setCurrentSubtestMSElapsed: React.Dispatch<React.SetStateAction<number>>;\r\n  setCurrentSubtestHasStarted: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst ControlPanel: React.FC<Props> = ({\r\n  subtest,\r\n  testCategory,\r\n  isTimerRequired,\r\n  currentSubtestHasStarted,\r\n  entireTestIsDone,\r\n  currentSubtestMSElapsed,\r\n  goToNextSubtest,\r\n  recordSubtestResult,\r\n  setCurrentSubtestMSElapsed,\r\n  setCurrentSubtestHasStarted\r\n}) => {\r\n  let prompt1: JSX.Element;\r\n  let prompt2: JSX.Element;\r\n\r\n  // TODO: the following hardcoded mess needs to be refactored lol\r\n\r\n  if (testCategory === 'naming') {\r\n    const popover = (\r\n      <Popover id=\"\">\r\n        <Popover.Title as=\"h3\">Highlighted Object</Popover.Title>\r\n        <Popover.Content>\r\n          <p>\r\n            <strong>Correct Responses</strong>: {subtest.acceptableResponses.join(', ')}\r\n          </p>\r\n          {subtest.incorrectResponses.length > 0 ? (\r\n            <p>\r\n              <strong>Incorrect Responses</strong>: {subtest.incorrectResponses.join(', ')}\r\n            </p>\r\n          ) : null}\r\n        </Popover.Content>\r\n      </Popover>\r\n    );\r\n\r\n    prompt1 = (\r\n      <p className=\"m-0\">\r\n        Ask the patient to name the {' '}\r\n        <OverlayTrigger placement=\"top\" overlay={popover}>\r\n          <span style={{ cursor: 'pointer', fontWeight: 'bold' }}>highlighted object</span>\r\n        </OverlayTrigger>\r\n        . Then start the timer.\r\n      </p>\r\n    );\r\n    prompt2 = <p>Stop the timer when an answer is provided.</p>;\r\n  } else if (testCategory === 'repetition') {\r\n    prompt1 = <p className=\"m-0\">Ask the patient to repeat the following word or sentence after you:</p>;\r\n    prompt2 = <p>\"{subtest}\"</p>;\r\n  } else if (testCategory === 'autoseq') {\r\n    prompt1 = <p className=\"m-0\">Ask the patient to do the following:</p>;\r\n    prompt2 = <p>\"{subtest}\"</p>;\r\n  } else if (testCategory === 'picID') {\r\n    prompt1 = (\r\n      <p className=\"m-0\">\r\n        Ask the patient to click on the <strong>{subtest}</strong>. Then start the timer.\r\n      </p>\r\n    );\r\n    prompt2 = <p>Stop the timer when an answer is provided.</p>;\r\n  } else if (testCategory === 'verbal') {\r\n    prompt1 = <p className=\"m-0\">Name the objects before starting the trial. Ask the patient to do the following:</p>;\r\n    prompt2 = <p>\"{subtest}\"</p>;\r\n  } else {\r\n    prompt1 = <p className=\"m-0\">The test has concluded.</p>;\r\n    prompt2 = <p>You may now export the test results.</p>;\r\n  }\r\n\r\n  const onPassFailBtnClick = (passed: boolean): void => {\r\n    recordSubtestResult(passed, isTimerRequired);\r\n    goToNextSubtest();\r\n  };\r\n\r\n  return (\r\n    <div className=\"ControlPanel\">\r\n      <button\r\n        type=\"button\"\r\n        id=\"btn-fail\"\r\n        className=\"btn btn-test btn-danger btn-control-passfail\"\r\n        value=\"fail\"\r\n        disabled={(!currentSubtestHasStarted && isTimerRequired) || entireTestIsDone}\r\n        onClick={() => onPassFailBtnClick(false)}\r\n      >\r\n        Fail\r\n      </button>\r\n\r\n      <section className=\"ControlPanel-Center\">\r\n        <Prompt\r\n          prompt1={prompt1}\r\n          prompt2={prompt2}\r\n          isTimerRequired={isTimerRequired}\r\n          currentSubtestMSElapsed={currentSubtestMSElapsed}\r\n          setCurrentSubtestMSElapsed={setCurrentSubtestMSElapsed}\r\n          setCurrentSubtestHasStarted={setCurrentSubtestHasStarted}\r\n        />\r\n        {/* <button className=\"btn subtle-label\">Need help?</button> */}\r\n      </section>\r\n\r\n      <button\r\n        type=\"button\"\r\n        id=\"btn-pass\"\r\n        className=\"btn btn-test btn-success btn-control-passfail\"\r\n        value=\"pass\"\r\n        disabled={(!currentSubtestHasStarted && isTimerRequired) || entireTestIsDone}\r\n        onClick={() => onPassFailBtnClick(true)}\r\n      >\r\n        Pass\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlPanel;\r\n","const flattenTestResultsToArray = (results, testCategories) => {\r\n  const mapFullCategoryName = {\r\n    naming: 'Naming',\r\n    repetition: 'Repetition',\r\n    autoseq: 'Automatic Sequence',\r\n    picID: 'Picture Identification',\r\n    verbal: 'Verbal Commands'\r\n  };\r\n\r\n  const arr = [];\r\n\r\n  for (const cat of testCategories) {\r\n    for (const result of results[cat]) {\r\n      const newObj = { ...result, test: mapFullCategoryName[cat], 'passed?': result.passed ? 'yes' : 'no' };\r\n\r\n      if (cat === 'naming') {\r\n        arr.push({ ...newObj, subtest: result.subtest.item });\r\n      } else {\r\n        arr.push({ ...newObj });\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\nconst arrayOfObjectsTOCSV = (arr) => {\r\n  const csvRows = [];\r\n\r\n  // get csv headers\r\n  // const headers = Object.keys(arr[0]);\r\n  const headers = [ 'test', 'subtest', 'secondsElapsed', 'passed?' ];\r\n  csvRows.push(headers.join(','));\r\n\r\n  // loop and generate rows\r\n  for (const row of arr) {\r\n    const values = headers.map((header) => {\r\n      const value = row[header] || 'N/A';\r\n      const escaped = ('' + value).replace(/\"/g, '\\\\\"');\r\n      return `\"${escaped}\"`;\r\n    });\r\n    csvRows.push(values.join(','));\r\n  }\r\n\r\n  return csvRows.join('\\n');\r\n};\r\n\r\nconst download = (data, type, fileName) => {\r\n  const blob = new Blob([ data ], { type });\r\n  const url = window.URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.setAttribute('hidden', '');\r\n  a.setAttribute('href', url);\r\n  a.setAttribute('download', `${fileName}.csv`);\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n};\r\n\r\nconst exportReport = (testResults, testCategories, testVersion) => {\r\n  const data = flattenTestResultsToArray(testResults, testCategories);\r\n  const csv = arrayOfObjectsTOCSV(data);\r\n\r\n  console.log(data);\r\n  download(csv, 'text/csv', `LASTen ${testVersion} - Report`);\r\n};\r\n\r\nexport default exportReport;\r\n","// TODO: re-implement this file without typescript nocheck\r\n// @ts-nocheck\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Collapse } from 'react-bootstrap';\r\nimport { FaCheck, FaTimes } from 'react-icons/fa';\r\nimport exportReport from '../../util/csv';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './TestResultsModal.css';\r\n\r\nimport { TestResults } from '../../types/LASTResultsFormat';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  handleClose: () => void;\r\n  testCategories: string[];\r\n  previousTestCategoryIndex: number;\r\n  tests: any;\r\n  results: TestResults;\r\n  entireTestIsDone: boolean;\r\n  testVersion: 'A' | 'B';\r\n}\r\n\r\nconst TestResultsModal: React.FC<Props> = ({\r\n  show,\r\n  handleClose,\r\n  testCategories,\r\n  previousTestCategoryIndex,\r\n  tests,\r\n  results,\r\n  entireTestIsDone,\r\n  testVersion\r\n}) => {\r\n  // state determines if that section is collapsed (not shown)\r\n  const [ showNaming, setShowNaming ] = useState(false);\r\n  const [ showRepetition, setShowRepetition ] = useState(false);\r\n  const [ showAutoSeq, setShowAutoSeq ] = useState(false);\r\n  const [ showpicID, setShowpicID ] = useState(false);\r\n  const [ showVerbal, setShowVerbal ] = useState(false);\r\n\r\n  // we'd like to show the results of the previous test category (list not collapsed)\r\n  // this is undefined at the start and end of the test (so show all categories)\r\n  let testCategoryToShow = testCategories[previousTestCategoryIndex];\r\n\r\n  useEffect(\r\n    // find out what to display in the modal:\r\n    () => {\r\n      if (mapCategoryCollapse[testCategoryToShow]) {\r\n        // show 1 category\r\n        for (let category in mapCategoryCollapse) {\r\n          if (category === testCategoryToShow) {\r\n            mapCategoryCollapse[category][1](true);\r\n          } else {\r\n            mapCategoryCollapse[category][1](false);\r\n          }\r\n        }\r\n      } else {\r\n        // show all categories\r\n        for (let category in mapCategoryCollapse) {\r\n          mapCategoryCollapse[category][1](true);\r\n        }\r\n      }\r\n    },\r\n    [ previousTestCategoryIndex ]\r\n  );\r\n\r\n  // : { [key: string]: [boolean, React.Dispatch<React.SetStateAction<boolean>>] }\r\n  const mapCategoryCollapse = {\r\n    naming: [ showNaming, setShowNaming ],\r\n    repetition: [ showRepetition, setShowRepetition ],\r\n    autoseq: [ showAutoSeq, setShowAutoSeq ],\r\n    picID: [ showpicID, setShowpicID ],\r\n    verbal: [ showVerbal, setShowVerbal ]\r\n  };\r\n\r\n  const mapFullCategoryName = {\r\n    naming: 'Naming',\r\n    repetition: 'Repetition',\r\n    autoseq: 'Automatic Sequence',\r\n    picID: 'Picture Identification',\r\n    verbal: 'Verbal Commands'\r\n  };\r\n\r\n  const generateListOfSubtests = (cat) => {\r\n    return (\r\n      <ul key={cat}>\r\n        {tests[cat].map((subtest, i) => {\r\n          // results[cat] only exists if a at least 1 subtest has been finished in that category\r\n          let resultOfSubtest = results[cat] && results[cat].find((result) => result.subtest === subtest);\r\n\r\n          if (resultOfSubtest) {\r\n            let iconResult = resultOfSubtest.passed ? <FaCheck color=\"green\" /> : <FaTimes color=\"#dc3545\" />;\r\n            let secondsElapsed = resultOfSubtest.secondsElapsed ? `(${resultOfSubtest.secondsElapsed}s)` : null;\r\n            let subtestName = subtest.item || subtest;\r\n            return (\r\n              <li key={i}>\r\n                {iconResult} {secondsElapsed} {subtestName}\r\n              </li>\r\n            );\r\n          } else {\r\n            // grey out that subtest (not yet done)\r\n            return (\r\n              <li key={i} style={{ color: 'grey' }}>\r\n                {subtest.item || subtest}\r\n              </li>\r\n            );\r\n          }\r\n        })}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  const body = testCategories.map((cat, i) => {\r\n    let fullCategoryName = mapFullCategoryName[cat];\r\n    let show = mapCategoryCollapse[cat][0];\r\n    let setShow = mapCategoryCollapse[cat][1];\r\n    let ith = i + 1;\r\n    return (\r\n      <div className=\"TestResultsModal-Section\" key={cat}>\r\n        <p\r\n          className=\"CategoryTitle\"\r\n          onClick={() => {\r\n            setShow(!show);\r\n          }}\r\n        >\r\n          {`${ith}. ${fullCategoryName}`}\r\n          <span className=\"CategoryTitle-DropIcon\">\r\n            <i className={'DropIcon-Arrow ' + (show ? 'DropIcon-Arrow-Up' : 'DropIcon-Arrow-Down')} />\r\n          </span>\r\n        </p>\r\n        <Collapse in={mapCategoryCollapse[cat][0]}>{generateListOfSubtests(cat)}</Collapse>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose} keyboard={false} centered>\r\n      <Modal.Header>\r\n        <Modal.Title>Tests Overview</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{body}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          variant=\"none\"\r\n          onClick={() => exportReport(results, testCategories, testVersion)}\r\n          style={{ visibility: entireTestIsDone ? 'visible' : 'hidden' }}\r\n        >\r\n          Export to CSV\r\n        </Button>\r\n        <Button variant=\"none\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default TestResultsModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport './TestSummaryBar.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { stringify } from 'querystring';\r\n\r\ninterface Props {\r\n  testCategory: string;\r\n  numberOfTests: number;\r\n  ithTest: number;\r\n  openModal: () => void;\r\n}\r\n\r\nconst TestSummaryBar: React.FC<Props> = ({ testCategory, numberOfTests, ithTest, openModal }) => {\r\n  const [ hasBeenClicked, setHasBeenClicked ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (Cookies.get('noPulse')) {\r\n      setHasBeenClicked(true);\r\n    }\r\n  }, []);\r\n\r\n  const mapFullCategoryName: { [key: string]: string } = {\r\n    naming: 'Naming',\r\n    repetition: 'Repetition',\r\n    autoseq: 'Automatic Sequence',\r\n    picID: 'Picture Identification',\r\n    verbal: 'Verbal Commands'\r\n  };\r\n\r\n  const handleClick = () => {\r\n    Cookies.set('noPulse', 'true');\r\n    setHasBeenClicked(true);\r\n    openModal();\r\n  };\r\n\r\n  let label: string;\r\n  const fullCategoryName = mapFullCategoryName[testCategory];\r\n  if (fullCategoryName) {\r\n    label = `Current Test: ${fullCategoryName} (${ithTest}/${numberOfTests})`;\r\n  } else {\r\n    label = 'View Results';\r\n  }\r\n\r\n  return (\r\n    <div className={'TestSummaryBar ' + (!hasBeenClicked ? 'pulse' : null)}>\r\n      <p className=\"TestSummaryBar-Text\" onClick={handleClick}>\r\n        {label}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestSummaryBar;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './BackButton.css';\r\n\r\ninterface Props {\r\n  action(): void;\r\n}\r\n\r\nconst BackButton: React.FC<Props> = ({ action }) => {\r\n  return (\r\n    <div>\r\n      <div className={'BackButton'} onClick={action}>\r\n        <p className=\"BackButton-Text\">Exit</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackButton;\r\n","import { LASTTestsDataFormat } from '../types/LASTDataFormat';\r\n\r\nconst LASTests: LASTTestsDataFormat = {\r\n  A: {\r\n    naming: [\r\n      {\r\n        item: 'phone',\r\n        jpg: 'test-phone.jpg',\r\n        acceptableResponses: [ 'telephone', 'phone', 'coordless phone', 'house phone (Eng)' ],\r\n        incorrectResponses: [ 'cell (phone)', 'mobile (phone)', 'iPhone' ]\r\n      },\r\n      {\r\n        item: 'pineapple',\r\n        jpg: 'test-pineapple.jpg',\r\n        acceptableResponses: [ 'pineapple' ],\r\n        incorrectResponses: []\r\n      },\r\n      {\r\n        item: 'pen',\r\n        jpg: 'test-pen.jpg',\r\n        acceptableResponses: [ 'pen', 'ballpoint pen', 'ink pen (USA)', 'biro (Aus, Eng)' ],\r\n        incorrectResponses: [ 'feather pen', 'felt tip pen', 'fountain pen' ]\r\n      },\r\n      {\r\n        item: 'croc',\r\n        jpg: 'test-croc.jpg',\r\n        acceptableResponses: [\r\n          'crocodile',\r\n          'alligator',\r\n          'gator (\"say the whole word\")',\r\n          'croc (\"say the whole word\")'\r\n        ],\r\n        incorrectResponses: []\r\n      },\r\n      {\r\n        item: 'fork',\r\n        jpg: 'test-fork.jpg',\r\n        acceptableResponses: [ 'fork', 'dessert fork' ],\r\n        incorrectResponses: [ 'pitch fork' ]\r\n      }\r\n    ],\r\n    repetition: [ 'Duplication', 'My neighbour took a letter to the post office.' ],\r\n    autoseq: [ 'Count from 1 to 10.' ],\r\n    picID: [ 'Racket/Racquet', 'Spoon', 'Ice Cream', 'Eye' ],\r\n    verbal: [\r\n      'Point to the ceiling.',\r\n      'Take the pen, but not the cup.',\r\n      'Put your hand on your head, and then your finger on your nose.'\r\n    ]\r\n  },\r\n  B: {\r\n    naming: [\r\n      {\r\n        item: 'pencil',\r\n        jpg: 'test-pencil.jpg',\r\n        acceptableResponses: [ 'pencil', 'lead pencil', 'pencil crayon (Can)', 'coloured pencil' ],\r\n        incorrectResponses: []\r\n      },\r\n      {\r\n        item: 'television',\r\n        jpg: 'test-tv.jpg',\r\n        acceptableResponses: [ 'television', 'TV', 'Telly (Eng)', 'TV set', 'TV monitor', 'TV screen', 'monitor' ],\r\n        incorrectResponses: [ 'screen' ]\r\n      },\r\n      {\r\n        item: 'giraffe',\r\n        jpg: 'test-giraffe.jpg',\r\n        acceptableResponses: [ 'giraffe' ],\r\n        incorrectResponses: []\r\n      },\r\n      {\r\n        item: 'knife',\r\n        jpg: 'test-knife.jpg',\r\n        acceptableResponses: [ 'knife', 'butter knife', 'dessert knife' ],\r\n        incorrectResponses: [ 'kitchen knife', 'steak knife' ]\r\n      },\r\n      {\r\n        item: 'butterfly',\r\n        jpg: 'test-butterfly.jpg',\r\n        acceptableResponses: [ 'butterfly', 'monarch (Can, USA)' ],\r\n        incorrectResponses: [ 'moth' ]\r\n      }\r\n    ],\r\n    repetition: [ 'Publication', 'The tourist bought a ticket to the early show.' ],\r\n    autoseq: [ 'Count from 1 to 10.' ],\r\n    picID: [ 'Cat', 'Hand', 'Car', 'Tomato' ],\r\n    verbal: [\r\n      'Point to the floor.',\r\n      'Take the key, but not the paper.',\r\n      'Touch your ear with one finger, and then your forehead with two fingers.'\r\n    ]\r\n  },\r\n  categoriesInOrder: [ 'naming', 'repetition', 'autoseq', 'picID', 'verbal' ]\r\n};\r\n\r\nexport default LASTests;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport ViewPanel from '../../components/ViewPanel/ViewPanel';\r\nimport ControlPanel from '../../components/ControlPanel/ControlPanel';\r\n\r\nimport TestResultsModal from '../../components/TestResultsModal/TestResultsModal';\r\nimport YesNoConfirmModal from '../../components/YesNoConfirmModal/YesNoConfirmModal';\r\n\r\nimport TestSummaryBar from '../../components/TestSummaryBar/TestSummaryBar';\r\nimport BackButton from '../../components/BackButton/BackButton';\r\nimport Cookies from 'js-cookie';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './TestDashboard.css';\r\n\r\nimport { GenericSubtest, NamingSubtest, EntireTest } from '../../types/LASTDataFormat';\r\nimport { SubtestResult, TestResults } from '../../types/LASTResultsFormat';\r\nimport LASTests from '../../data/LASTests';\r\n\r\ntype Props = any;\r\n\r\nconst TestDashboard: React.FC<Props> = (props) => {\r\n  // (sub)test state\r\n  const [ results, setResults ] = useState<TestResults>({});\r\n  const [ entireTestIsDone, setEntireTestIsDone ] = useState(false);\r\n  const [ currentSubtestIndex, setCurrentSubtestIndex ] = useState(0);\r\n  const [ currentTestCategoryIndex, setCurrentTestCategoryIndex ] = useState(0);\r\n  // modal (popups) state\r\n  const [ showTestResultsModal, setShowTestResultsModal ] = useState(false);\r\n  const [ showGoBackModal, setShowGoBackModal ] = useState(false);\r\n  // subtest timer state\r\n  const [ currentSubtestHasStarted, setCurrentSubtestHasStarted ] = useState(false);\r\n  const [ currentSubtestMSElapsed, setCurrentSubtestMSElapsed ] = useState(0); // miliseconds elapsed for the current subtest (ie. name the pineapple)\r\n\r\n  // show the modal whenver a set of tests is done (index gets reset to 0)\r\n  useEffect(\r\n    () => {\r\n      if (currentSubtestIndex === 0 && currentTestCategoryIndex !== 0) {\r\n        setShowTestResultsModal(true);\r\n      }\r\n    },\r\n    [ currentTestCategoryIndex ]\r\n  );\r\n\r\n  // when the entire test is done\r\n  useEffect(\r\n    () => {\r\n      if (entireTestIsDone) {\r\n        // TODO: clean up state\r\n        setShowTestResultsModal(true);\r\n        console.log(results);\r\n      }\r\n    },\r\n    [ entireTestIsDone ]\r\n  );\r\n\r\n  const loggedIn = Cookies.get('loggedIn');\r\n  const userFirstName = Cookies.get('userFirstName');\r\n  const userLastName = Cookies.get('userLastName');\r\n  const userType = Cookies.get('userType');\r\n\r\n  if (!loggedIn) return <Redirect to=\"/\" />;\r\n  if (!userFirstName || !userLastName || userType !== 'examiner') return <Redirect to=\"/user-registration\" />;\r\n\r\n  // get test version (A or B)\r\n  const pathElements = props.location.pathname.split('/');\r\n  const testVersion: 'A' | 'B' = pathElements[pathElements.length - 1];\r\n\r\n  // init test\r\n  const tests: EntireTest = LASTests[testVersion];\r\n  const testCategories = LASTests['categoriesInOrder'];\r\n\r\n  // init subtest\r\n  let currentTestCategory: string = '';\r\n  let currentSubtest: GenericSubtest | NamingSubtest = '';\r\n\r\n  if (currentTestCategoryIndex >= 0 && currentSubtestIndex >= 0) {\r\n    currentTestCategory = testCategories[currentTestCategoryIndex];\r\n    currentSubtest = tests[currentTestCategory][currentSubtestIndex];\r\n  }\r\n\r\n  // saves the result of the subtest into the 'results' object\r\n  const recordSubtestResult = (passed: boolean, isTimerRequired: boolean) => {\r\n    const newResult: SubtestResult = {\r\n      passed: passed,\r\n      subtest: currentSubtest,\r\n      secondsElapsed: isTimerRequired ? currentSubtestMSElapsed / 100 : null\r\n    };\r\n\r\n    const newResults: TestResults = { ...results };\r\n\r\n    if (newResults[currentTestCategory]) {\r\n      // append to existing array\r\n      newResults[currentTestCategory] = [ ...newResults[currentTestCategory], newResult ];\r\n    } else {\r\n      // create new array\r\n      newResults[currentTestCategory] = [ newResult ];\r\n    }\r\n\r\n    setResults(newResults);\r\n  };\r\n\r\n  const goToNextSubtest = () => {\r\n    setNextTestIndices();\r\n    setCurrentSubtestHasStarted(false);\r\n    setCurrentSubtestMSElapsed(0);\r\n  };\r\n\r\n  // sets the indices that point to the next subtest\r\n  const setNextTestIndices = () => {\r\n    if (currentSubtestIndex + 1 >= tests[currentTestCategory].length) {\r\n      // go to the next test category, if it exists\r\n      setCurrentSubtestIndex(0);\r\n      if (currentTestCategoryIndex + 1 >= testCategories.length) {\r\n        setEntireTestIsDone(true);\r\n        setCurrentSubtestIndex(-1);\r\n        setCurrentTestCategoryIndex(-1);\r\n      } else {\r\n        setCurrentTestCategoryIndex(currentTestCategoryIndex + 1);\r\n      }\r\n    } else {\r\n      setCurrentSubtestIndex(currentSubtestIndex + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"TestDashboard\">\r\n      <BackButton action={() => setShowGoBackModal(true)} />\r\n\r\n      <TestSummaryBar\r\n        testCategory={currentTestCategory}\r\n        openModal={() => setShowTestResultsModal(true)}\r\n        numberOfTests={tests[currentTestCategory] && tests[currentTestCategory].length}\r\n        ithTest={currentSubtestIndex + 1}\r\n      />\r\n\r\n      <ViewPanel testVersion={testVersion} testCategory={currentTestCategory} subtest={currentSubtest} />\r\n\r\n      <ControlPanel\r\n        // state\r\n        entireTestIsDone={entireTestIsDone}\r\n        subtest={currentSubtest}\r\n        testCategory={currentTestCategory}\r\n        isTimerRequired={currentTestCategory === 'naming' || currentTestCategory === 'picID'} // move this information into LASTests.js\r\n        // parent functions\r\n        goToNextSubtest={goToNextSubtest}\r\n        recordSubtestResult={recordSubtestResult}\r\n        // pass parent hooks down, since we need to update the global dashboard state from child components\r\n        currentSubtestMSElapsed={currentSubtestMSElapsed}\r\n        setCurrentSubtestMSElapsed={setCurrentSubtestMSElapsed}\r\n        currentSubtestHasStarted={currentSubtestHasStarted}\r\n        setCurrentSubtestHasStarted={setCurrentSubtestHasStarted}\r\n      />\r\n\r\n      <TestResultsModal\r\n        show={showTestResultsModal}\r\n        handleClose={() => setShowTestResultsModal(false)}\r\n        entireTestIsDone={entireTestIsDone}\r\n        tests={tests}\r\n        results={results}\r\n        previousTestCategoryIndex={currentTestCategoryIndex - 1}\r\n        testCategories={testCategories}\r\n        testVersion={testVersion}\r\n      />\r\n\r\n      <YesNoConfirmModal\r\n        show={showGoBackModal}\r\n        hideModal={() => setShowGoBackModal(false)}\r\n        text1=\"Are you sure you want to exit?\"\r\n        text2=\"All test progress will be lost.\"\r\n        action={props.history.goBack}\r\n      />\r\n\r\n      {/* TODO: INSTRUCTIONS MODAL */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestDashboard;\r\n","import React from 'react';\r\nimport { Route, HashRouter } from 'react-router-dom';\r\nimport Auth from '../../views/AuthMenu/AuthMenu';\r\nimport UserRegistration from '../../views/UserRegistration/UserRegistration';\r\nimport ExaminerMenu from '../../views/ExaminerMenu/ExaminerMenu';\r\nimport PatientMenu from '../../views/PatientMenu/PatientMenu';\r\nimport ExaminerTests from '../../views/ExaminerTests/ExaminerTests';\r\nimport TestDashboard from '../../views/TestDashboard/TestDashboard';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App d-flex justify-content-center align-items-center\">\r\n      <HashRouter basename=\"/\">\r\n        <Route component={Auth} exact path=\"/\" />\r\n        <Route component={UserRegistration} exact path=\"/user-registration\" />\r\n        <Route component={PatientMenu} exact path=\"/patient\" />\r\n        <Route component={ExaminerMenu} exact path=\"/examiner\" />\r\n        <Route component={ExaminerTests} exact path=\"/examiner/tests\" />\r\n        <Route component={TestDashboard} exact path=\"/examiner/tests/A\" />\r\n        <Route component={TestDashboard} exact path=\"/examiner/tests/B\" />\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './components/App/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/test.d70945e8.png\";","module.exports = __webpack_public_path__ + \"static/media/test.74e8ac00.png\";"],"sourceRoot":""}